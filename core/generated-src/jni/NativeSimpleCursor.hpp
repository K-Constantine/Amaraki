// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from application.djinni

#pragma once

#include "djinni_support.hpp"
#include "simple_cursor.hpp"

namespace djinni_generated {

class NativeSimpleCursor final : ::djinni::JniInterface<::oaktree_gen::SimpleCursor, NativeSimpleCursor> {
public:
    using CppType = std::shared_ptr<::oaktree_gen::SimpleCursor>;
    using CppOptType = std::shared_ptr<::oaktree_gen::SimpleCursor>;
    using JniType = jobject;

    using Boxed = NativeSimpleCursor;

    ~NativeSimpleCursor();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeSimpleCursor>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeSimpleCursor>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeSimpleCursor();
    friend ::djinni::JniClass<NativeSimpleCursor>;
    friend ::djinni::JniInterface<::oaktree_gen::SimpleCursor, NativeSimpleCursor>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::oaktree_gen::SimpleCursor
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void close() override;
        void reset() override;
        int32_t get_count() override;
        int32_t get_position() override;
        std::vector<std::string> get_column_names() override;
        bool is_last() override;
        bool is_first() override;
        bool is_closed() override;
        std::string get_string(const std::string & column_name) override;
        bool move_to_next() override;
        bool move_to_last() override;
        bool move_to_first() override;
        bool move_to_previous() override;
        bool move_to_position(int32_t position) override;
        std::string to_json() override;

    private:
        friend ::djinni::JniInterface<::oaktree_gen::SimpleCursor, ::djinni_generated::NativeSimpleCursor>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/siliconbear/oakstore/SimpleCursor") };
    const jmethodID method_close { ::djinni::jniGetMethodID(clazz.get(), "close", "()V") };
    const jmethodID method_reset { ::djinni::jniGetMethodID(clazz.get(), "reset", "()V") };
    const jmethodID method_getCount { ::djinni::jniGetMethodID(clazz.get(), "getCount", "()I") };
    const jmethodID method_getPosition { ::djinni::jniGetMethodID(clazz.get(), "getPosition", "()I") };
    const jmethodID method_getColumnNames { ::djinni::jniGetMethodID(clazz.get(), "getColumnNames", "()Ljava/util/ArrayList;") };
    const jmethodID method_isLast { ::djinni::jniGetMethodID(clazz.get(), "isLast", "()Z") };
    const jmethodID method_isFirst { ::djinni::jniGetMethodID(clazz.get(), "isFirst", "()Z") };
    const jmethodID method_isClosed { ::djinni::jniGetMethodID(clazz.get(), "isClosed", "()Z") };
    const jmethodID method_getString { ::djinni::jniGetMethodID(clazz.get(), "getString", "(Ljava/lang/String;)Ljava/lang/String;") };
    const jmethodID method_moveToNext { ::djinni::jniGetMethodID(clazz.get(), "moveToNext", "()Z") };
    const jmethodID method_moveToLast { ::djinni::jniGetMethodID(clazz.get(), "moveToLast", "()Z") };
    const jmethodID method_moveToFirst { ::djinni::jniGetMethodID(clazz.get(), "moveToFirst", "()Z") };
    const jmethodID method_moveToPrevious { ::djinni::jniGetMethodID(clazz.get(), "moveToPrevious", "()Z") };
    const jmethodID method_moveToPosition { ::djinni::jniGetMethodID(clazz.get(), "moveToPosition", "(I)Z") };
    const jmethodID method_toJson { ::djinni::jniGetMethodID(clazz.get(), "toJson", "()Ljava/lang/String;") };
};

}  // namespace djinni_generated
