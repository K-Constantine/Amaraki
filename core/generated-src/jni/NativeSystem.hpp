// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from application.djinni

#pragma once

#include "djinni_support.hpp"
#include "system.hpp"

namespace djinni_generated {

class NativeSystem final : ::djinni::JniInterface<::oaktree_gen::System, NativeSystem> {
public:
    using CppType = std::shared_ptr<::oaktree_gen::System>;
    using CppOptType = std::shared_ptr<::oaktree_gen::System>;
    using JniType = jobject;

    using Boxed = NativeSystem;

    ~NativeSystem();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeSystem>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeSystem>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeSystem();
    friend ::djinni::JniClass<NativeSystem>;
    friend ::djinni::JniInterface<::oaktree_gen::System, NativeSystem>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::oaktree_gen::System
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string get_path() override;
        std::shared_ptr<::oaktree_gen::SimpleCursor> query(const std::string & database, const std::string & query) override;

    private:
        friend ::djinni::JniInterface<::oaktree_gen::System, ::djinni_generated::NativeSystem>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/siliconbear/oakstore/System") };
    const jmethodID method_getPath { ::djinni::jniGetMethodID(clazz.get(), "getPath", "()Ljava/lang/String;") };
    const jmethodID method_query { ::djinni::jniGetMethodID(clazz.get(), "query", "(Ljava/lang/String;Ljava/lang/String;)Lcom/siliconbear/oakstore/SimpleCursor;") };
};

}  // namespace djinni_generated
