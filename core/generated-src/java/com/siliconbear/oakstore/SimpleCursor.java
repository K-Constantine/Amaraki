// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from application.djinni

package com.siliconbear.oakstore;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class SimpleCursor {
    public abstract void close();

    public abstract void reset();

    public abstract int getCount();

    public abstract int getPosition();

    public abstract ArrayList<String> getColumnNames();

    public abstract boolean isLast();

    public abstract boolean isFirst();

    public abstract boolean isClosed();

    public abstract String getString(String columnName);

    public abstract boolean moveToNext();

    public abstract boolean moveToLast();

    public abstract boolean moveToFirst();

    public abstract boolean moveToPrevious();

    public abstract boolean moveToPosition(int position);

    public abstract String toJson();

    private static final class CppProxy extends SimpleCursor
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public void reset()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_reset(this.nativeRef);
        }
        private native void native_reset(long _nativeRef);

        @Override
        public int getCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCount(this.nativeRef);
        }
        private native int native_getCount(long _nativeRef);

        @Override
        public int getPosition()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPosition(this.nativeRef);
        }
        private native int native_getPosition(long _nativeRef);

        @Override
        public ArrayList<String> getColumnNames()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getColumnNames(this.nativeRef);
        }
        private native ArrayList<String> native_getColumnNames(long _nativeRef);

        @Override
        public boolean isLast()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isLast(this.nativeRef);
        }
        private native boolean native_isLast(long _nativeRef);

        @Override
        public boolean isFirst()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isFirst(this.nativeRef);
        }
        private native boolean native_isFirst(long _nativeRef);

        @Override
        public boolean isClosed()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isClosed(this.nativeRef);
        }
        private native boolean native_isClosed(long _nativeRef);

        @Override
        public String getString(String columnName)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, columnName);
        }
        private native String native_getString(long _nativeRef, String columnName);

        @Override
        public boolean moveToNext()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_moveToNext(this.nativeRef);
        }
        private native boolean native_moveToNext(long _nativeRef);

        @Override
        public boolean moveToLast()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_moveToLast(this.nativeRef);
        }
        private native boolean native_moveToLast(long _nativeRef);

        @Override
        public boolean moveToFirst()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_moveToFirst(this.nativeRef);
        }
        private native boolean native_moveToFirst(long _nativeRef);

        @Override
        public boolean moveToPrevious()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_moveToPrevious(this.nativeRef);
        }
        private native boolean native_moveToPrevious(long _nativeRef);

        @Override
        public boolean moveToPosition(int position)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_moveToPosition(this.nativeRef, position);
        }
        private native boolean native_moveToPosition(long _nativeRef, int position);

        @Override
        public String toJson()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toJson(this.nativeRef);
        }
        private native String native_toJson(long _nativeRef);
    }
}
