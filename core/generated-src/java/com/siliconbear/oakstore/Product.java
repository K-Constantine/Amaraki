// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from simi.djinni

package com.siliconbear.oakstore;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Product {
    public abstract String getId();

    public abstract String getName();

    public abstract String getPrice();

    public abstract boolean isInStock();

    public abstract String getImageUrl();

    public static native Product getInstance(SimpleCursor cursor);

    private static final class CppProxy extends Product
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getId(this.nativeRef);
        }
        private native String native_getId(long _nativeRef);

        @Override
        public String getName()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getName(this.nativeRef);
        }
        private native String native_getName(long _nativeRef);

        @Override
        public String getPrice()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPrice(this.nativeRef);
        }
        private native String native_getPrice(long _nativeRef);

        @Override
        public boolean isInStock()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInStock(this.nativeRef);
        }
        private native boolean native_isInStock(long _nativeRef);

        @Override
        public String getImageUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getImageUrl(this.nativeRef);
        }
        private native String native_getImageUrl(long _nativeRef);
    }
}
