// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from application.djinni

#import "OAKLIBSimpleCursor+Private.h"
#import "OAKLIBSimpleCursor.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface OAKLIBSimpleCursorCppProxy : NSObject<OAKLIBSimpleCursor>

- (id)initWithCpp:(const std::shared_ptr<::oaktree_gen::SimpleCursor>&)cppRef;

@end

@implementation OAKLIBSimpleCursorCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::oaktree_gen::SimpleCursor>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::oaktree_gen::SimpleCursor>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)reset {
    try {
        _cppRefHandle.get()->reset();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getCount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_count();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getPosition {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_position();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSString *> *)getColumnNames {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_column_names();
        return ::djinni::List<::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isLast {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->is_last();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isFirst {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->is_first();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isClosed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->is_closed();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getString:(nonnull NSString *)columnName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_string(::djinni::String::toCpp(columnName));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)moveToNext {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->move_to_next();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)moveToLast {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->move_to_last();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)moveToFirst {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->move_to_first();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)moveToPrevious {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->move_to_previous();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)moveToPosition:(int32_t)position {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->move_to_position(::djinni::I32::toCpp(position));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)toJson {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->to_json();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class SimpleCursor::ObjcProxy final
: public ::oaktree_gen::SimpleCursor
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::SimpleCursor;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void close() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() close];
        }
    }
    void reset() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() reset];
        }
    }
    int32_t get_count() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getCount];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    int32_t get_position() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getPosition];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    std::vector<std::string> get_column_names() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getColumnNames];
            return ::djinni::List<::djinni::String>::toCpp(objcpp_result_);
        }
    }
    bool is_last() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() isLast];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool is_first() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() isFirst];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool is_closed() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() isClosed];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    std::string get_string(const std::string & c_column_name) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getString:(::djinni::String::fromCpp(c_column_name))];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    bool move_to_next() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() moveToNext];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool move_to_last() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() moveToLast];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool move_to_first() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() moveToFirst];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool move_to_previous() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() moveToPrevious];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool move_to_position(int32_t c_position) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() moveToPosition:(::djinni::I32::fromCpp(c_position))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    std::string to_json() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() toJson];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto SimpleCursor::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[OAKLIBSimpleCursorCppProxy class]]) {
        return ((OAKLIBSimpleCursorCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto SimpleCursor::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<OAKLIBSimpleCursorCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
